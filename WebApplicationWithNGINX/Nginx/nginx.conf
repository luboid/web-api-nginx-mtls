worker_processes 2;

events { worker_connections 1024; }

http {
    map_hash_bucket_size 128;

    map $ssl_client_i_dn $success_0 {
        default 0;
        "emailAddress=luboid@yahoo.com,CN=localhost,OU=Development,O=My Company Ltd,L=Plovdiv,ST=Plovdiv,C=BG" 1;
    }

    map $ssl_client_fingerprint $success_1 {
        default 0;
        "045f00631655469b4d368057f80f646e3af45f6d" $success_0;
        "2783ae8dc7e81816d10f1bb00fd469c80ce4e6d4" 0;
    }

    map $ssl_client_verify $ssl_client_verify_success {
        default 0;
        "SUCCESS" $success_1;
    }

    upstream web-api {
        server WebApplicationWithNGINX:80;
    }

    server {
        listen 80;
        listen [::]:80;
        server_name localhost;

        error_log /host/pub/logs/nginx/http-debug.log debug;
        access_log /host/pub/logs/nginx/http-access.log;

        location / {
			# don't cache it
			proxy_no_cache 1;
			# even if cached, don't try to use it
			proxy_cache_bypass 1;

			expires -1;
			add_header Cache-Control "no-cache";

			# retains POST as POST not transfer to GET
			return 307 https://$host:44381$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name localhost;

        error_log /host/pub/logs/nginx/https-debug.log debug;
        access_log /host/pub/logs/nginx/https-access.log;

        # server certificate
        ssl_certificate /host/certs/localhost.crt;
        ssl_certificate_key /host/certs/localhost.key;
        # named pipe can also be used instead of a file
        # ssl_password_file /etc/keys/fifo;

        # client certificate store multiple in single file in PEM format
        ssl_client_certificate /host/certs/trusted-certificate-store.pem;
        ssl_trusted_certificate /host/certs/trusted-certificate-store.pem;

        # If we need Nginx to leave the certificate checking to core app, simply use the code - optional_no_ca;
        # make verification optional, so we can display a 403 message to those
        # who fail authentication
        # ssl_verify_client optional;
        ssl_verify_client on;
        ssl_verify_depth 2; # tried 0,1,2,3

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        # ssl_prefer_server_ciphers on;
        # https://www.openssl.org/docs/man1.0.2/man1/ciphers.html
        # ssl_ciphers               "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        # ssl_ecdh_curve            secp384r1;
        ssl_session_cache         shared:SSL:40m;
        # ssl_session_tickets       on; # help http client not to make full TLS handshake
        ssl_session_timeout       1h;
        ssl_stapling              on; # ensure your cert is capable
        ssl_stapling_verify       on; # ensure your cert is capable

        # add Strict-Transport-Security to prevent man in the middle attacks
        # add_header Strict-Transport-Security "max-age=31536000" always;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        error_log /host/pub/logs/nginx/https-debug.log debug;
        access_log /host/pub/logs/nginx/https-access.log;

        location / {
            # if the client-side certificate failed to authenticate, show a 403
            # message to the client
            # if ($ssl_client_verify != SUCCESS) {
            #     return 403;
            # }
            if ($ssl_client_verify_success != 1) {
                return 403;
            }

            proxy_pass         http://web-api;
            proxy_redirect     off;
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $http_host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   X-Forwarded-Host $server_name;
            proxy_set_header   X-ARR-ClientCert $ssl_client_escaped_cert;
        }
    }
}